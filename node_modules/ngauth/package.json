{
  "name": "ngauth",
  "version": "0.0.8",
  "description": "Authorization layer over angular",
  "main": "AuthBase.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://AlmogBaku@github.com/GoDisco/ngAuth.git"
  },
  "keywords": [
    "ngAuth",
    "ngauth",
    "angular",
    "authentication",
    "authorization",
    "auth",
    "ng-facebook",
    "ngFacebook"
  ],
  "author": {
    "name": "AlmogBaku"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/GoDisco/ngAuth/issues"
  },
  "readme": "Angular Authorization layer\n=============================\nThis module allows you to add authorization layer to your angular project, and to filter pages for \"anonymous\" and \"authenticated\" users.\n\n\n## Installation ##\n\n** You can assist the example on `AuthExample.js` of using `ngAuth` with `ng-facebook` module **\n\n1. Download using one of the following options:\n   1. npm: `npm install ngauth`\n   1. bower: `bower install ngAuth`\n   1. git\n1. Add the module to your dependencies and include its scripts\n1. Create your own authentication service by implementing the `AuthBase` abstract:\n    ```javascript\n    angular.module('myApp', ['ngAuthBase'])\n        .factory('Auth', ['$facebook', 'AuthBaseUI', '$rootScope',\n            function($facebook, AuthBase, $rootScope) {\n                var Auth = angular.extend(AuthBase,  {});\n    \n                return Auth;\n            }])\n        .run(['Auth', function(Auth) {}])\n    ;\n    ```\n    *** use `AuthBase` dependency for regular `ng-route`, and `AuthBaseUI` for `router-ui` ***\n2. Implement the following methods:\n    2.1. `setIsLoggedIn()` should check if the user is logged-in:\n        `true` - logged-in user\n        `false` - anonymous user\n        `null` - information not available yet(waiting to response)\n\n## Usage ##\n\n### Defining routes ###\n1. add `anonymous: true` to every route which allowed only for anonymous users\n1. add `authenticated: true` to every route which allowed only for anonymous users\n\nExample:\n```js\n$stateProvider\n    .state('login', {\n        url: '/login',\n        controller: 'loginCtrl',\n        anonymous: true,\n        templateUrl: 'src/app/views/login.html'\n    })\n;\n```\n\n### Authentication status change handler ###\n\nYou can attach handler for every time the authentication status is changed and ready, by listening to `Auth.status`:\n\nExample:\n```js\n$rootScope.$on(\"Auth.status\", function(event, status) {\n    if(status) {\n        console.log(\"Logged In!\");\n    } else {\n        console.log(\"Logged out!\")\n    }\n});\n```\n\n### Add login/logout methods to your auth service ###\nIt's recommended to add your login/logout method on your auth service.\n",
  "readmeFilename": "README.md",
  "_id": "ngauth@0.0.8",
  "_from": "ngauth@"
}
